function unittests
  % Make_board tests %
  assertEqual(make_board(3,4), [' ' ' ' ' ' ' '; ' ' ' ' ' ' ' '; ' ' ' ' ' ' ' '])

  % get_shape tests %
  assertEqual(get_shape('O'), ['O' 'O'; 'O' 'O'])

  % get_board_slice tests %
  [slice row col] = get_board_slice(['I' ' ' ' ' ' ';...
                                     'I' ' ' ' ' ' ';...
                                     'I' 'O' 'O' ' ';...
                                     'I' 'O' 'O' ' '],...
                                    ['L' 'L';...
                                     ' ' 'L';...
                                     ' ' 'L'],...
                                    2,...
                                    3);
  assertEqual(slice, [' ' ' '; 'O' ' '; 'O' ' '])
  assertEqual([row col], [4 4])

  % place_shape tests %
  assertEqual(...
      place_shape(...
          ['I' ' ' ' ' ' ';...
           'I' ' ' ' ' ' ';...
           'I' 'O' 'O' ' ';...
           'I' 'O' 'O' ' '],...
          ['L' 'L';...
           ' ' 'L';...
           ' ' 'L'],...
          2,...
          3),...
      ['I' ' ' ' ' ' ';
       'I' ' ' 'L' 'L';
       'I' 'O' 'O' 'L';
       'I' 'O' 'O' 'L'])

  % try_fit tests %
  [fit fill] = try_fit([' ' ' '; 'I' ' '; 'I' ' '], ['L' 'L'; ' ' 'L'; ' ' 'L']);
  assertEqual([fit fill], [true 2])

  % find_best_place_for_rotation tests %
  [fits row col score] = find_best_place_for_rotation([' ' ' ' ' '; 'x' ' ' ' '; ' ' ' ' ' '], [' ' 'x'; 'x' 'x']);
  assertEqual([fits row col score], [true, 2, 1, 1])

  % find_best_place tests %
  [fits row col rotations] = find_best_place(['O' ' ' 'O'; ' ' ' ' 'O'; 'O' ' ' 'O'], [' ' 'T' ' '; 'T' 'T' 'T']);
  assertEqual([fits row col rotations], [true, 1, 1, 3])
end
